{-# LANGUAGE DeriveGeneric #-}

module Action where

import Model
import Data.ModelTree
import Control.Monad.Act
import Data.Sequence
import GHC.Generics (Generic)
import Data.Serialize


<% @action_names.each do |action_name| %>
import qualified <%= action_name %>
<% end %>

act :: String -> [Model] -> Act (Either String Model)
<% @action_names.each do |action_name| %>
act "<%= action_name %>" args = <%= action_name %>.act args
act "<%= action_name.split('.')[1..-1].join('.') %>" args = <%= action_name %>.act args
<% end %>
act actionName _ = return $ Left ("no such action!? " ++ actionName)

runAction :: String -> [Model] -> ModelTree -> Either String (Model, ModelTree, Seq TreeMod)
runAction actionName args = runAct (act actionName args)

data Command = Command String [Model]
  deriving (Eq, Ord, Show, Generic)
instance Serialize Command
runCommand (Command s l) = runAction s l

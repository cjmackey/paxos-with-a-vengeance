{-# LANGUAGE DeriveGeneric #-}
module Model where

import Data.Word
import Control.Monad (liftM)

import Data.Serialize
import Data.Serialize.Get()
import Data.Serialize.Put()
import qualified Data.Text
import qualified Data.Text.Encoding
import Data.ByteString(ByteString)
import qualified Data.ByteString
import Data.Sequence(Seq)
import qualified Data.ByteString.UTF8
import Test.QuickCheck
import GHC.Generics (Generic)

<% @model_names.each do |model_name| %>
import qualified <%= model_name %>
<% end %>

data Model = MInteger Integer
           | MByteString ByteString
           | MText Data.Text.Text
           | MList [Model]
           | MSeq (Seq Model)
           | MRational Rational
           | MNothing<% @model_names.each do |model_name| %>
           | <%= model_name.gsub('.','') %> <%= model_name %>.<%= model_name.split('.')[-1] %><% end %>
     deriving (Eq, Ord, Show, Generic)

instance Serialize Model where
  put (MText t)       = put (0 :: Word8) >> put (Data.Text.Encoding.encodeUtf8 t :: ByteString)
  put (MByteString t) = put (1 :: Word8) >> put t
  put (MList t)       = put (2 :: Word8) >> put t
  put (MSeq t)        = put (3 :: Word8) >> put t
  put (MInteger t)    = put (4 :: Word8) >> put t
  put (MRational t)   = put (5 :: Word8) >> put t
  put MNothing        = put (255 :: Word8)<% @model_names.each do |model_name| %>
  put (<%= model_name.gsub('.','') %> x) = do
    put (77 :: Word8)
    put (Data.ByteString.UTF8.fromString "<%= model_name.gsub('.','') %>")
    put x<% end %>
  get = do
    headChar <- get :: Get Word8
    case headChar of
      0   -> liftM MText getText
      1   -> liftM MByteString get
      2   -> liftM MList get
      3   -> liftM MSeq get
      4   -> liftM MInteger get
      5   -> liftM MRational get
      255 -> return MNothing
      77  -> get >>= (\bs -> case Data.ByteString.UTF8.toString bs of<% @model_names.each do |model_name| %>
                               "<%= model_name.gsub('.','') %>" -> liftM <%= model_name.gsub('.','') %> get<% end %>
                               _ -> return MNothing)
      _ -> return MNothing -- NOTE: is there a way to force a fail?

getText = do
  bs <- get :: Get ByteString
  return (Data.Text.Encoding.decodeUtf8 bs)

instance Arbitrary Data.Text.Text where
  arbitrary = liftM Data.Text.pack arbitrary
instance Arbitrary ByteString where
  arbitrary = liftM Data.ByteString.pack arbitrary
